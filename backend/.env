PORT=8000
MONGODB_URI=mongodb+srv://mdfirdoushali1776:8676mongo@cluster0.d8nnq.mongodb.net
CORS_ORIGIN=*
ACCESS_TOKEN_SECRET=123
ACCESS_TOKEN_EXPIRY=1d
REFRESH_TOKEN_SECRET=456
REFRESH_TOKEN_EXPIRY=10d

CLOUDINARY_CLOUD_NAME=duexdlxrx
CLOUDINARY_API_KEY=241828577172375
CLOUDINARY_API_SECRET=cxrvXCIPreUzZA9rK0O6Em_1YFM


# The .env package, typically referred to as "dotenv" in Node.js, is used for managing environment variables in your application. It's a popular tool for keeping configuration separate from your code, especially for sensitive information like API keys, database credentials, and other environment-specific settings. Here's an overview of its use and benefits:

# Purpose:

# Loads environment variables from a file named .env into process.env
# Keeps sensitive data out of your codebase
# Allows for different configurations in different environments (development, staging, production)


# Installation:
# Copynpm install dotenv

# Basic usage:
# Create a .env file in your project root:
# CopyDB_HOST=localhost
# DB_USER=root
# DB_PASS=s1mpl3
# In your Node.js application:
# javascriptCopyrequire('dotenv').config()

# console.log(process.env.DB_HOST)
# // Output: localhost

# Best practices:

# Never commit your .env file to version control
# Include a .env.example file with dummy values for reference
# Use different .env files for different environments


# Security:

# Helps prevent accidental exposure of secrets in your code
# Allows easy rotation of secrets without changing code


# Configuration management:

# Simplifies configuration across different deployment environments
# Makes it easy to change settings without modifying code


# Integration with other tools:

# Works well with various deployment platforms and CI/CD pipelines
# Can be used in conjunction with other configuration management tools


# Error handling:

# You can check if .env file exists and handle errors appropriately


# Custom path:


